daml 1.2
module ToDoList where

import DA.Time

template ToDoItem
    with 
        issuer : Party
        assignee : Party
        toDoDescription : Text
        startTime : Time 
        endTime : Time
        timeSpent : RelTime
    where
        signatory issuer, assignee

        controller assignee can
            StartWorking : ()
                do
                    startTime <- getTime
                    return ()
            -- Every time I want to update an existing contract I actually need to archive 
            -- it and create a new one with the updated values
            EndWorking : ContractId ToDoItem
                do 
                    newEndTime <- getTime
                    create this with endTime = newEndTime
            FinishTask : ()
                do 
                    -- take a value from an action. subTime is not an action
                    -- 
                    let timeSpent = subTime endTime startTime
                    return ()

template ToDoItemProposal 
    with 
        toDo : ToDoItem
    where 
        signatory toDo.issuer

        controller toDo.assignee can 
            AcceptTask : ContractId ToDoItem
                do 
                    create toDo 
                        with 
                            issuer = toDo.issuer
                            assignee = toDo.assignee

            RejectTask : ContractId ToDoItemProposal
                --with newAssignee : Party
                -- by default assign the original issuer as the assignee letting him/her know that the proposal has been rejected
                do
                    create this
                        with 
                            toDo = this.toDo 
                                with 
                                    assignee = toDo.issuer

toDoItem_test = scenario do
    alice <- getParty "Alice"
    bob <- getParty "Bob"
    mark <- getParty "Mark"

    -- "toDoItemProposal" is like a pointer in c of type ContractId - Position in a ledger 
    -- key value store 
    toDoItemProposal : ContractId ToDoItemProposal <- submit alice do
        now <- getTime
        create ToDoItemProposal with
            toDo = ToDoItem with
                issuer = alice
                assignee = bob
                toDoDescription = "This is a todo"
                startTime = now
                endTime = now
                timeSpent = subTime now now

    submit bob do
        -- ContractId is the key and fetch "fetches" the values associated with the ContractId
        toDoItemProposalData <- fetch toDoItemProposal
        exercise toDoItemProposal RejectTask 
            --with
                --newAssignee = toDoItemProposalData.toDo.issuer