-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Tests.Chess where

import DA.Assert

import Init
import Types

testEnum = scenario do
  let lst = [0..63]
  let coords = [A1 .. H8]
  lst === fmap fromEnum coords

testFoolsMate = scenario do
  InitData {..} <- initData

  let
    takeMove = createTakeMove operator
    moves = [ (white, G2, G4)
            , (black, E7, E6)
            , (white, F2, F4)
            , (black, D8, H4)
            , (white, E1, F2)
            , (black, H4, F2)
            ]
    game = (activeSideOfGameId, passiveSideOfGameId)
  game <- foldl takeMove (return $ Right game) moves

  win <- case game of
    Right _ -> abort "Should be a win"
    --Left win -> submit black do fetch win
    -- TODO: How do I tie this back together so that either party can see the result?
    Left win -> submit operator do fetch win

  win.winner === Some black
