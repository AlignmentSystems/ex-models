-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Trading where

import Bitcoin.Utils

import DA.Either
import DA.List
import DA.Optional


template DeskHead
  with
    deskHead : Party
  where
    signatory deskHead

    controller deskHead can
      InviteTrader : ContractId TraderInvitation
        with
          trader     : Party
          buyLimit   : Decimal
          sellLimit  : Satoshi
          backOffice : Party
        do
          create TraderInvitation with ..


template TraderInvitation
  with
    trader     : Party
    deskHead   : Party
    backOffice : Party
    buyLimit   : Decimal
    sellLimit  : Satoshi
  where
    signatory deskHead

    ensure buyLimit > 0.0 && sellLimit > 0

    controller trader can
      AcceptTraderInvitation : ContractId Trader
        do create Trader with ..


template Trader
  with
    trader     : Party
    deskHead   : Party
    backOffice : Party
    buyLimit   : Decimal
    sellLimit  : Satoshi
  where
    signatory deskHead, trader

    controller trader can
      nonconsuming CreateBid : Either (ContractId BitcoinBidRequest)
                                      (ContractId BitcoinBid)
        with
          bidId     : Text
          price     : Decimal
          size      : Satoshi
          observers : [Party]
        do
          let notional = toBTC size * price
          if notional > buyLimit
          then do
            reqCid <- create BitcoinBidRequest with ..
            return $ Left reqCid
          else do
            bidCid <- create BitcoinBid with ..
            return $ Right bidCid

      nonconsuming CreateOffer : Either (ContractId BitcoinOfferRequest)
                                        (ContractId BitcoinOffer)
        with
          offerId   : Text
          price     : Decimal
          size      : Satoshi
          observers : [Party]
        do
          if size > sellLimit
          then do
            reqCid <- create BitcoinOfferRequest with ..
            return $ Left reqCid
          else do
            offerCid <- create BitcoinOffer with ..
            return $ Right offerCid

      nonconsuming HitBid : Either (ContractId BitcoinTradeRequest)
                                   (ContractId BitcoinTrade)
        with
          bidCid : ContractId BitcoinBid
        do
          bid <- fetch bidCid
          optApprovalCid <- lookupByKey @ApprovedBitcoinTradeRequest (bid.bidId, trader)
          if bid.size > sellLimit && isNone optApprovalCid
          then do
            reqCid <- create BitcoinTradeRequest with
              seller    = trader,
                buyer   = bid.trader,
                price   = bid.price,
                size    = bid.size,
                tradeId = bid.bidId, ..
            return $ Left reqCid
          else if isSome optApprovalCid then do
            let approvalCid = fromSome optApprovalCid
            approval <- fetch approvalCid
            assert (approval.tradeId == bid.bidId)
            archive approvalCid
            tradeCid <- exercise bidCid HitBitcoinBid with
              seller             = trader,
                sellerDeskHead   = deskHead,
                sellerBackOffice = backOffice
            return $ Right tradeCid
          else do
            tradeCid <- exercise bidCid HitBitcoinBid with
              seller             = trader,
                sellerDeskHead   = deskHead,
                sellerBackOffice = backOffice
            return $ Right tradeCid

      nonconsuming LiftOffer : Either (ContractId BitcoinTradeRequest)
                                      (ContractId BitcoinTrade)
        with
          offerCid : ContractId BitcoinOffer
        do
          offer <- fetch offerCid
          optApprovalCid <- lookupByKey @ApprovedBitcoinTradeRequest (offer.offerId, trader)
          let notional = toBTC offer.size * offer.price
          if notional > buyLimit  && isNone optApprovalCid
          then do
            reqCid <- create BitcoinTradeRequest with
              seller    = offer.trader,
                buyer   = trader,
                price   = offer.price,
                size    = offer.size,
                tradeId = offer.offerId, ..
            return $ Left reqCid
          else if isSome optApprovalCid then do
            let approvalCid = fromSome optApprovalCid
            approval <- fetch approvalCid
            assert (approval.tradeId == offer.offerId)
            archive approvalCid
            tradeCid <- exercise offerCid LiftBitcoinOffer with
              buyer             = trader,
                buyerDeskHead   = deskHead,
                buyerBackOffice = backOffice
            return $ Right tradeCid
          else do
            tradeCid <- exercise offerCid LiftBitcoinOffer with
              buyer             = trader,
                buyerDeskHead   = deskHead,
                buyerBackOffice = backOffice
            return $ Right tradeCid

    controller deskHead can
      ChangeTraderBuyLimit : ContractId Trader
        with
          newBuyLimit : Decimal
        do
          assert(newBuyLimit /= buyLimit)
          create this with buyLimit = newBuyLimit

      ChangeTraderSellLimit : ContractId Trader
        with
          newSellLimit : Satoshi
        do
          assert(newSellLimit /= sellLimit)
          create this with sellLimit = newSellLimit


template BitcoinBidRequest
  with
    trader     : Party
    deskHead   : Party
    backOffice : Party
    bidId      : Text
    price      : Decimal
    size       : Satoshi
    observers  : [Party]
  where
    signatory deskHead, trader

    controller deskHead can
      ApproveBid : ContractId BitcoinBid
        do
          create BitcoinBid with ..

      RejectBid : ()
        do return ()


template BitcoinBid
  with
    trader     : Party
    deskHead   : Party
    backOffice : Party
    bidId      : Text
    price      : Decimal
    size       : Satoshi
    observers  : [Party]
  where
    signatory deskHead, trader

    observer observers

    ensure price > 0.0 && size > 0

    choice HitBitcoinBid : ContractId BitcoinTrade with
        seller           : Party
        sellerDeskHead   : Party
        sellerBackOffice : Party
      controller [seller, sellerDeskHead]
        do
          assert (seller /= trader)
          create BitcoinTrade with
            tradeId = bidId
            buyer = trader
            seller = seller
            buyerBackOffice = backOffice
            sellerBackOffice = sellerBackOffice
            price = price
            size = size
            cashTransferId = None
            bitcoinTxHash = None
            bitcoinAddress = None
            observers = [deskHead, sellerDeskHead]

    choice CancelBid : () with
        party : Party
      controller party
        do
          assert (elem party [deskHead, trader])
          return ()


template BitcoinTradeRequest
  with
    tradeId  : Text
    trader   : Party
    buyer    : Party
    seller   : Party
    deskHead : Party
    price    : Decimal
    size     : Satoshi
  where
    signatory deskHead, trader
    ensure trader == buyer || trader == seller

    controller deskHead can
      ApproveTradeRequest : ContractId ApprovedBitcoinTradeRequest
        do create ApprovedBitcoinTradeRequest with ..

      RejectTradeRequest : ()
        do return ()


template ApprovedBitcoinTradeRequest
  with
    tradeId  : Text
    trader   : Party
    buyer    : Party
    seller   : Party
    deskHead : Party
    price    : Decimal
    size     : Satoshi
  where
    signatory deskHead, trader

    key (tradeId, trader) : (Text, Party)

    maintainer key._2


template BitcoinOfferRequest
  with
    trader     : Party
    deskHead   : Party
    backOffice : Party
    offerId    : Text
    price      : Decimal
    size       : Satoshi
    observers  : [Party]
  where
    signatory deskHead, trader

    controller deskHead can
      ApproveOffer : ContractId BitcoinOffer
        do
          create BitcoinOffer with ..

      RejectOffer : ()
        do
          return ()


template BitcoinOffer
  with
    trader     : Party
    deskHead   : Party
    backOffice : Party
    offerId    : Text
    price      : Decimal
    size       : Satoshi
    observers  : [Party]
  where
    signatory deskHead, trader

    observer observers

    ensure price > 0.0 && size > 0

    choice LiftBitcoinOffer : ContractId BitcoinTrade with
        buyer           : Party
        buyerDeskHead   : Party
        buyerBackOffice : Party
      controller [buyer, buyerDeskHead]
        do
          assert (buyer /= trader)
          create BitcoinTrade with
            tradeId = offerId
            seller = trader
            sellerBackOffice = backOffice
            cashTransferId = None
            bitcoinTxHash = None
            bitcoinAddress = None
            observers = [buyerDeskHead, deskHead]
            ..

    choice CancelOffer : () with
        party : Party
      controller party
        do
          assert (elem party [deskHead, trader])
          return ()


template BitcoinTrade
  with
    tradeId          : Text
    buyer            : Party
    seller           : Party
    buyerBackOffice  : Party
    sellerBackOffice : Party
    price            : Decimal
    size             : Satoshi
    cashTransferId   : Optional Text
    bitcoinTxHash    : Optional Text
    bitcoinAddress   : Optional BitcoinAddress
    observers        : [Party]
  where
    signatory buyer, seller
    observer observers

    controller buyerBackOffice can
      SettleCash : ContractId BitcoinTrade
        with
          cashId     : Text
          btcAddress : BitcoinAddress
        do
          assert (cashTransferId == None)
          assert (bitcoinAddress == None)
          create this with
            cashTransferId = Some cashId,
              bitcoinAddress = Some btcAddress

    controller sellerBackOffice can
      SettleBitcoin : ContractId BitcoinTrade
        with
          txHash : Text
        do
          assert (bitcoinTxHash == None)
          create this with bitcoinTxHash = Some txHash


test = scenario do
  traderA     <- getParty "Trader A"
  deskHeadA   <- getParty "Desk Head A"
  backOfficeA <- getParty "Back Office A"

  traderB     <- getParty "Trader B"
  deskHeadB   <- getParty "Desk Head B"
  backOfficeB <- getParty "Back Office B"
  let observers = [traderA, traderB]

  -- create Desk Heads and Traders
  deskHeadACid <- deskHeadA `submit`
    create DeskHead with deskHead = deskHeadA
  traderAInvCid <- deskHeadA `submit`
    exercise deskHeadACid InviteTrader
      with
        trader     = traderA
        buyLimit   = 10000.0
        sellLimit  = 100_000_000
        backOffice = backOfficeA
  traderACid <- traderA `submit`
    exercise traderAInvCid AcceptTraderInvitation

  deskHeadBCid <- deskHeadB `submit`
    create DeskHead with deskHead = deskHeadB
  traderBInvCid <- deskHeadB `submit`
    exercise deskHeadBCid InviteTrader
      with
        trader     = traderB
        buyLimit   = 5000.0
        sellLimit  = 50_000_000
        backOffice = backOfficeB
  traderBCid <- traderB `submit`
    exercise traderBInvCid AcceptTraderInvitation

  -- new bid and hitting the bit do not require approval
  eitherBid <- traderA `submit`
    exercise traderACid CreateBid
      with
        bidId = "1"
        price = 5000.0
        size  = 50_000_000
        observers
  let bidCid = head $ rights [eitherBid]

  eitherTrade <- traderB `submit`
    exercise traderBCid HitBid
      with
        bidCid
  let tradeCid = head $ rights [eitherTrade]

  tradeCid <- backOfficeA `submit`
    exercise tradeCid SettleCash
      with
        cashId     = "cash1"
        btcAddress = "addr1"
  backOfficeB `submit`
    exercise tradeCid SettleBitcoin
      with
        txHash = "hash1"

  -- new offer and lifting the offer do not require approval
  eitherOffer <- traderA `submit`
    exercise traderACid CreateOffer
      with
        offerId = "2"
        price   = 5000.0
        size    = 50_000_000
        observers
  let offerCid = head $ rights [eitherOffer]

  eitherTrade <- traderB `submit`
    exercise traderBCid LiftOffer
      with
        offerCid
  let tradeCid = head $ rights [eitherTrade]

  tradeCid <- backOfficeB `submit`
    exercise tradeCid SettleCash
      with
        cashId     = "cash2"
        btcAddress = "addr2"
  backOfficeA `submit`
    exercise tradeCid SettleBitcoin
      with
        txHash = "hash2"

  -- new bid and hitting that bit do require approval
  eitherBid <- traderA `submit`
    exercise traderACid CreateBid
      with
        bidId = "3"
        price = 10000.1
        size  = 100_000_000
        observers
  let bidReqCid = head $ lefts [eitherBid]

  bidCid <- deskHeadA `submit`
    exercise bidReqCid ApproveBid
  eitherTrade <- traderB `submit`
    exercise traderBCid HitBid
      with
        bidCid
  let tradeReqCid = head $ lefts [eitherTrade]

  deskHeadB `submit`
    exercise tradeReqCid ApproveTradeRequest
  eitherTrade <- traderB `submit`
    exercise traderBCid HitBid
      with
        bidCid
  let tradeCid = head $ rights [eitherTrade]

  tradeCid <- backOfficeA `submit`
    exercise tradeCid SettleCash
      with
        cashId     = "cash3"
        btcAddress = "addr3"
  backOfficeB `submit`
    exercise tradeCid SettleBitcoin
      with
        txHash = "hash3"

  -- new offer and lift offer do require approval
  eitherOffer <- traderA `submit`
    exercise traderACid CreateOffer
      with
        offerId = "4"
        price   = 10000.0
        size    = 100_000_001
        observers
  let offerReqCid = head $ lefts [eitherOffer]

  offerCid <- deskHeadA `submit`
    exercise offerReqCid ApproveOffer
  eitherTrade <- traderB `submit`
    exercise traderBCid LiftOffer
      with
        offerCid
  let tradeReqCid = head $ lefts [eitherTrade]

  deskHeadB `submit`
    exercise tradeReqCid ApproveTradeRequest
  eitherTrade <- traderB `submit`
    exercise traderBCid LiftOffer
      with offerCid
  let tradeCid = head $ rights [eitherTrade]

  tradeCid <- backOfficeB `submit`
    exercise tradeCid SettleCash
      with
        cashId     = "cash4"
        btcAddress = "addr4"
  backOfficeA `submit`
    exercise tradeCid SettleBitcoin
      with
        txHash = "hash4"
